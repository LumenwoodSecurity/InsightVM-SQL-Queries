WITH cert_expiration_dates AS (
   SELECT
      DISTINCT asset_id,
      service_id,
      name,
      value
   FROM
      dim_asset_service_configuration
   WHERE
      lower(name) LIKE '%ssl.cert.not.valid.after'
),
vulnerability_data AS (
   SELECT
      asset_id,
      count(vulnerability_id) AS num_vulnerabilities
   FROM
      fact_asset_vulnerability_instance
   GROUP BY
      asset_id
)

SELECT
    dt.tag_name AS "Tag Name",
    dt.tag_type AS "Tag Type",
    cast(sum(fa.riskscore) AS BIGINT) AS "Risk Score",
    count(fa.asset_id) AS "Total Assets",
    sum(case when CURRENT_TIMESTAMP - cast(ced.value AS DATE) > INTERVAL '90 days' then 1 else 0 end) AS "Assets with Expired SSL Certificates",
    coalesce(sum(vd.num_vulnerabilities), 0) AS "Total Vulnerabilities",
    coalesce(avg(vd.num_vulnerabilities), 0) AS "Average Vulnerabilities per Asset"
FROM
    dim_tag dt
    JOIN dim_tag_asset dta USING(tag_id)
    JOIN fact_asset fa USING(asset_id)
    LEFT JOIN cert_expiration_dates ced ON fa.asset_id = ced.asset_id
    LEFT JOIN vulnerability_data vd ON fa.asset_id = vd.asset_id
WHERE
    dt.tag_type = 'owner'
GROUP BY
    dt.tag_name,
    dt.tag_type
ORDER BY
    "Risk Score" DESC
------------------------------------------------------------------------------------
WITH asset_vulnerabilities AS (
    SELECT
        da.asset_id,
        COUNT(dv.vulnerability_id) AS vulnerability_count,
        COUNT(CASE WHEN dv.exploits <> 0 THEN 1 END) AS vulnerabilities_with_known_exploits
    FROM
        dim_asset da
        JOIN fact_asset_vulnerability_instance fav USING(asset_id)
        JOIN dim_vulnerability dv USING(vulnerability_id)
    GROUP BY
        da.asset_id
),
cert_expiration_dates AS (
    SELECT
        DISTINCT asset_id,
        service_id,
        name,
        value
    FROM
        dim_asset_service_configuration
    WHERE
        lower(name) LIKE '%ssl.cert.not.valid.after'
),
asset_tags AS (
    SELECT
        dt.tag_name AS "Tag Name",
        dt.tag_type AS "Tag Type",
        COUNT(DISTINCT dta.asset_id) AS "Total Assets",
        SUM(CASE WHEN CURRENT_TIMESTAMP - cast(ced.value AS DATE) <= INTERVAL '90 days' THEN 1 ELSE 0 END) AS "Assets with Expired SSL Certificates",
        SUM(fa.riskscore) AS "Total Risk Score",
        AVG(fa.riskscore) AS "Average Risk Score per Asset",
        SUM(av.vulnerability_count) AS "Total Vulnerabilities",
        AVG(av.vulnerability_count) AS "Average Vulnerabilities per Asset",
        SUM(av.vulnerabilities_with_known_exploits) AS "Assets with Vulnerabilities with Known Exploits"
    FROM
        dim_tag dt
        JOIN dim_tag_asset dta USING(tag_id)
        JOIN fact_asset fa USING(asset_id)
        LEFT JOIN asset_vulnerabilities av USING(asset_id)
        LEFT JOIN cert_expiration_dates ced USING(asset_id)
    WHERE
        dt.tag_type = 'OWNER'
    GROUP BY
        dt.tag_name,
        dt.tag_type
)
SELECT * FROM asset_tags
ORDER BY
    "Total Risk Score" DESC;
------------------------------------------------------------
WITH asset_vulnerabilities AS (
    SELECT
        da.asset_id,
        COUNT(dv.vulnerability_id) AS vulnerability_count,
        COUNT(CASE WHEN dv.exploits <> 0 THEN 1 END) AS vulnerabilities_with_known_exploits
    FROM
        dim_asset da
        JOIN fact_asset_vulnerability_instance fav USING(asset_id)
        JOIN dim_vulnerability dv USING(vulnerability_id)
    GROUP BY
        da.asset_id
),
end_of_life_assets AS (
    SELECT 
        asset_id 
    FROM 
        fact_asset_scan_operating_system 
    WHERE 
        end_of_life = TRUE
),
cert_expiration_dates AS (
    SELECT
        DISTINCT asset_id,
        service_id,
        name,
        value
    FROM
        dim_asset_service_configuration
    WHERE
        lower(name) LIKE '%ssl.cert.not.valid.after'
),
asset_tags AS (
    SELECT
        dt.tag_name AS "Tag Name",
        dt.tag_type AS "Tag Type",
        COUNT(DISTINCT dta.asset_id) AS "Total Assets",
        SUM(CASE WHEN CURRENT_TIMESTAMP - cast(ced.value AS DATE) <= INTERVAL '90 days' THEN 1 ELSE 0 END) AS "Assets with Expired SSL Certificates",
        SUM(fa.riskscore) AS "Total Risk Score",
        AVG(fa.riskscore) AS "Average Risk Score per Asset",
        COUNT(DISTINCT eoa.asset_id) AS "Assets with End of Life OS", -- Added this line
        SUM(av.vulnerability_count) AS "Total Vulnerabilities",
        AVG(av.vulnerability_count) AS "Average Vulnerabilities per Asset",
        SUM(av.vulnerabilities_with_known_exploits) AS "Assets with Vulnerabilities with Known Exploits"
    FROM
        dim_tag dt
        JOIN dim_tag_asset dta USING(tag_id)
        JOIN fact_asset fa USING(asset_id)
        LEFT JOIN asset_vulnerabilities av USING(asset_id)
        LEFT JOIN cert_expiration_dates ced USING(asset_id)
        LEFT JOIN end_of_life_assets eoa USING(asset_id) -- Added this line
    WHERE
        dt.tag_type = 'OWNER'
    GROUP BY
        dt.tag_name,
        dt.tag_type
)
SELECT * FROM asset_tags
ORDER BY
    "Total Risk Score" DESC;
---------------------------------------------------------------
Updated 30d Spec
---------------------------------------------------------------
WITH asset_vulnerabilities AS (
    SELECT
        da.asset_id,
        COUNT(dv.vulnerability_id) AS vulnerability_count,
        COUNT(CASE WHEN fav.exploitable = 'true' THEN 1 END) AS vulnerabilities_with_known_exploits
    FROM
        dim_asset da
        JOIN fact_asset_vulnerability_instance fav USING(asset_id)
        JOIN dim_vulnerability dv USING(vulnerability_id)
    WHERE
        DATE_PART('month', fav.date) = DATE_PART('month', CURRENT_DATE - INTERVAL '1 month')
        AND DATE_PART('year', fav.date) = DATE_PART('year', CURRENT_DATE - INTERVAL '1 month')
    GROUP BY
        da.asset_id
),
asset_tags AS (
    SELECT
        dt.tag_id AS "Tag ID",
        COUNT(DISTINCT dta.asset_id) AS "Total Assets",
        SUM(fa.riskscore) AS "Risk Score",
        SUM(av.vulnerability_count) AS "Total Vulnerabilities",
        CASE WHEN COUNT(DISTINCT dta.asset_id) > 0 THEN SUM(av.vulnerability_count) / COUNT(DISTINCT dta.asset_id) ELSE 0 END AS "Average Vulnerabilities per Asset",
        SUM(av.vulnerabilities_with_known_exploits) AS "Assets with Vulnerabilities with Known Exploits"
    FROM
        dim_tag dt
        JOIN dim_tag_asset dta USING(tag_id)
        JOIN fact_asset fa USING(asset_id)
        LEFT JOIN asset_vulnerabilities av USING(asset_id)
    WHERE
        dt.tag_id = [YOUR_TAG_ID]
    GROUP BY
        dt.tag_id
)
SELECT * FROM asset_tags
ORDER BY
    "Risk Score" DESC
LIMIT 10;
---------------------------------------------
WITH
asset_risk AS (
  SELECT
    da.asset_id,
    da.riskscore
  FROM
    dim_asset da
),
asset_vulnerability AS (
  SELECT
    fav.asset_id,
    COUNT(fav.vulnerability_id) AS vulnerability_count
  FROM
    fact_asset_vulnerability fav
  GROUP BY
    fav.asset_id
),
asset_vulnerability_severity AS (
  SELECT
    favs.asset_id,
    COUNT(favs.vulnerability_id) AS high_severity_vulnerability_count
  FROM
    fact_asset_vulnerability_severity favs
  WHERE
    favs.severity_level = 'High'
  GROUP BY
    favs.asset_id
),
riskiest_assets AS (
  SELECT
    ar.asset_id,
    ar.riskscore
  FROM
    asset_risk ar
  ORDER BY
    ar.riskscore DESC
  LIMIT 10
)
SELECT
  da.ip_address,
  da.host_name,
  ar.riskscore,
  av.vulnerability_count,
  avs.high_severity_vulnerability_count,
  CASE
    WHEN ra.asset_id IS NOT NULL THEN 'Yes'
    ELSE 'No'
  END AS is_riskiest
FROM
  dim_asset da
LEFT JOIN
  asset_risk ar ON da.asset_id = ar.asset_id
LEFT JOIN
  asset_vulnerability av ON da.asset_id = av.asset_id
LEFT JOIN
  asset_vulnerability_severity avs ON da.asset_id = avs.asset_id
LEFT JOIN
  riskiest_assets ra ON da.asset_id = ra.asset_id
ORDER BY
  ar.riskscore DESC;
